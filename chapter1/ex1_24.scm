(define (expmod base exp m)
	(cond ((= exp 0) 1)
			((even? exp)
				(remainder
					(square (expmod base (/ exp 2) m))
					m))
			(else
				(remainder
					(* base (expmod base (- exp 1) m))
					m))))
(define (fermat-test n)
	(define (try-it a)
		(= (expmod a n n) a))
	(try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
	(cond ((= times 0) true)
			((fermat-test n) (fast-prime? n (- times 1)))
			(else false)))

(define (timed-prime-test n)
	(newline)
	(display n)
	(start-prime-test n (runtime)))
(define (start-prime-test n start-time)
	(if (fast-prime? n 1000)
		(report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time))

(define (search-for-primes first last)
	(define (search-iter cur last)
		(if (<= cur last) (timed-prime-test cur))
		(if (<= cur last) (search-iter (+ cur 2) last)))
	(search-iter (if (even? first) (+ first 1) first)
					(if (even? last) (- last 1) last)))

(search-for-primes 1000 1019)
(search-for-primes 10000 10037)
(search-for-primes 100000 100043)
(search-for-primes 1000000 1000037)
(newline)
(search-for-primes 1000000000 1000000021)
(search-for-primes 10000000000 10000000061)
(search-for-primes 100000000000 100000000057)
(search-for-primes 1000000000000 1000000000063)