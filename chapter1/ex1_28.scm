(define (expmod base exp m)
	(define (non-trivial-check-squaremod x squaremod)
		(if (and (= squaremod 1) (not (or (= x 1) (= x (- m 1))))) 0 squaremod))
	(define (non-trivial-check x)
		(non-trivial-check-squaremod x (remainder (square x) m)))
	(cond ((= exp 0) 1)
			((even? exp)				
				(non-trivial-check (expmod base (/ exp 2) m)))
			(else
				(remainder
					(* base (expmod base (- exp 1) m))
					m))))
(define (miller-rabin-test n)
	(define (try-it a)
		(= (expmod a (- n 1) n) 1))
	(try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
	(cond ((= times 0) true)
			((miller-rabin-test n) (fast-prime? n (- times 1)))
			(else false)))
(define (full-miller-rabin-test n)
	(newline)
	(display "Test Number: ")
	(display n)
	(display " *** ")
	(define (iter-miller-rabin-test a)
		(cond ((= a 0) true)
				((= (expmod a (- n 1) n) 1) (iter-miller-rabin-test (- a 1)))
				(else false)))
	(if (iter-miller-rabin-test (- n 1)) (display "PRIME NUMBER") (display "NON-PRIME NUMBER")))

(full-miller-rabin-test 2)
(full-miller-rabin-test 13)
(full-miller-rabin-test 15)

(full-miller-rabin-test 561)
(full-miller-rabin-test 1105)
(full-miller-rabin-test 1729)
(full-miller-rabin-test 2465)
(full-miller-rabin-test 2821)
(full-miller-rabin-test 6601)