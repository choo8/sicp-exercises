(define (square x)
	(* x x))
(define (average x y)
	(/ (+ x y) 2))
(define (sqrt-improve guess x)
	(average guess (/ x guess)))
(define (iterative-improve good-enough? improve-guess)
	(lambda (guess) 
		(define (recur x)
			(if (good-enough? x)
				x
				(recur (improve-guess x))))
		(recur guess)))
(define (sqrt x)
	(define (sqrt-good-enough? guess)
		(< (abs (- (square guess) x)) 0.001))
	(define (sqrt-improve guess)
		(average guess (/ x guess)))
	((iterative-improve sqrt-good-enough? sqrt-improve) 1.0))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
	(define (fixed-point-good-enough? guess)
		(< (abs (- guess (f guess))) tolerance))
	(define (fixed-point-improve guess)
		(f guess))
	((iterative-improve fixed-point-good-enough? fixed-point-improve) first-guess))